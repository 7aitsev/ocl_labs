--- host.c.orig	2018-05-19 19:42:12.000000000 +0300
+++ host.c	2018-05-19 20:01:44.000000000 +0300
@@ -33,7 +33,7 @@
     }
 
     /* 3. Allocate the host memory buffer(s) */
-    cl_int data_in = 0xCAFE;
+    cl_int data_in[] = {0xBEEF, 0xF00D};
     cl_int data_out;
     size_t data_size = sizeof(cl_int);
 
@@ -47,7 +47,15 @@
     }
 
     /* 5. Allocate the device memory buffer(s) */
-    cl_mem buf_out =
+    cl_mem buf_out[2];
+    buf_out[0] =
+        clCreateBuffer(context, CL_MEM_WRITE_ONLY, data_size, NULL, &rv);
+    if(CL_SUCCESS != rv)
+    {
+        print_cl_error("Failed to create a buffer object:", rv, stderr);
+        return rv;
+    }
+    buf_out[1] =
         clCreateBuffer(context, CL_MEM_WRITE_ONLY, data_size, NULL, &rv);
     if(CL_SUCCESS != rv)
     {
@@ -75,55 +83,52 @@
         return rv;
     }
 
-    /* 10. Setup the arguments to the kernel object */
-    rv  = clSetKernelArg(kernel, 0, sizeof(cl_mem), &buf_out);
-    rv |= clSetKernelArg(kernel, 1, sizeof(cl_int), &data_in);
-    if(CL_SUCCESS != rv)
+    for(cl_int i = 0; i < 2; ++i)
     {
-        print_cl_error("Failed to set an argument:", rv, stderr);
-        return rv;
-    }
-
-    /* 11. Enqueue the kernel object for execution */
-    //cl_event kernel_event; /* task1 */
-    rv = clEnqueueTask(cmd_q, kernel, 0, NULL, NULL);
-    /*
-    // the same as above using clEnqueueNDRangeKernel() call
-    size_t global_work_size = 1;
-    rv = clEnqueueNDRangeKernel(cmd_q, kernel, 1, NULL,
-            &global_work_size, NULL, 0, NULL, NULL);
-    */
-    if(CL_SUCCESS != rv)
-    {
-        print_cl_error("Couldn\'t enqueue a task:", rv, stderr);
-        return rv;
+        /* 10. Setup the arguments to the kernel object */
+        rv  = clSetKernelArg(kernel, 0, sizeof(cl_mem), &buf_out[i]);
+        rv |= clSetKernelArg(kernel, 1, sizeof(cl_int), &data_in[i]);
+        if(CL_SUCCESS != rv)
+        {
+            print_cl_error("Failed to set an argument:", rv, stderr);
+            return rv;
+        }
+
+        /* 11. Enqueue the kernel object foe execution */
+        rv = clEnqueueTask(cmd_q, kernel, 0, NULL, NULL);
+        if(CL_SUCCESS != rv)
+        {
+            print_cl_error("Couldn\'t enqueue a task:", rv, stderr);
+            return rv;
+        }
     }
 
     // synchronization point
     if(CL_SUCCESS != (rv = clFinish(cmd_q)))
         print_cl_error("Failed to set a synchronization point:", rv, stderr);
 
-    // get kernel time using the OpenCL event profiling API
-    /* task1 */
-    
-    /* 12. Read out the buffer back from the device to the host */
-    rv = clEnqueueReadBuffer(cmd_q, buf_out, CL_TRUE, 0, data_size, &data_out,
-            0, NULL, NULL);
-    if(CL_SUCCESS != rv)
+    for(cl_int i = 0; i < 2; ++i)
     {
-        print_cl_error("Failed to enqueue the command to read the data:",
-                rv, stderr);
-        return rv;
-    }
+        /* 12. Read out the buffer back from the device to the host */
+        rv = clEnqueueReadBuffer(cmd_q, buf_out[i], CL_TRUE, 0, data_size, &data_out,
+                0, NULL, NULL);
+        if(CL_SUCCESS != rv)
+        {
+            print_cl_error("Failed to enqueue the command to read the data:",
+                    rv, stderr);
+            return rv;
+        }
 
-    printf("Read value: %X\n", data_out);
+        printf("Read value: %X\n", data_out);
+    }
 
     /* 13. Finalization */
     clReleaseKernel(kernel);
     clReleaseProgram(program);
     clReleaseCommandQueue(cmd_q);
     clReleaseContext(context);
-    clReleaseMemObject(buf_out);
+    clReleaseMemObject(buf_out[0]);
+    clReleaseMemObject(buf_out[1]);
     // free host buffers bellow if necessary
 
     return 0;
