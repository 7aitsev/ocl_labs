--- host.c.orig	2018-06-24 16:14:24.493267489 +0300
+++ host.c	2018-06-24 16:13:05.599789806 +0300
@@ -8,7 +8,8 @@
 #include "../common/errorcodes.c"
 #include "../common/utils.c"
 
-#define KERNEL_FILE_NAME "lab1.aocx"
+#define KERNEL_FILE_NAME "lab1_t3.aocx"
+#define NUM_ELEMENTS 2
 
 int
 main(int argc, char** argv)
@@ -33,9 +34,9 @@
     }
 
     /* 3. Allocate the host memory buffer(s) */
-    cl_int data_in = 0xCAFE;
-    cl_int data_out;
-    size_t data_size = sizeof(cl_int);
+    cl_int in_data[NUM_ELEMENTS] = {0xBEEF, 0xF00D};
+    cl_int out_data[NUM_ELEMENTS] = {0};
+    size_t data_size = NUM_ELEMENTS * sizeof(cl_int);
 
     /* 4. Create a command queue with profiling enabled */
     cl_command_queue cmd_q = clCreateCommandQueue(context, device, 
@@ -51,12 +52,26 @@
         clCreateBuffer(context, CL_MEM_WRITE_ONLY, data_size, NULL, &rv);
     if(CL_SUCCESS != rv)
     {
-        print_cl_error("Failed to create a buffer object:", rv, stderr);
+        print_cl_error("Failed to create a buffer object (out):", rv, stderr);
+        return rv;
+    }
+    cl_mem buf_in =
+        clCreateBuffer(context, CL_MEM_READ_ONLY, data_size, NULL, &rv);
+    if(CL_SUCCESS != rv)
+    {
+        print_cl_error("Failed to create a buffer object (in):", rv, stderr);
         return rv;
     }
 
     /* 6. Write the data from the host buffers to the device buffers */
-    // don't need this step (except for task3)
+    rv = clEnqueueWriteBuffer(cmd_q, buf_in, CL_FALSE, 0,
+            data_size, in_data, 0, NULL, NULL);
+    if(CL_SUCCESS != rv)
+    {
+        print_cl_error("Couldn\'t enqueue the command to write the data:",
+                rv, stderr);
+        return rv;
+    }
 
     /* 7-8. Read the kernel file and build a program (see common/utils.c) */
     cl_program program;
@@ -77,7 +92,7 @@
 
     /* 10. Setup the arguments to the kernel object */
     rv  = clSetKernelArg(kernel, 0, sizeof(cl_mem), &buf_out);
-    rv |= clSetKernelArg(kernel, 1, sizeof(cl_int), &data_in);
+    rv |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &buf_in);
     if(CL_SUCCESS != rv)
     {
         print_cl_error("Failed to set an argument:", rv, stderr);
@@ -85,14 +100,9 @@
     }
 
     /* 11. Enqueue the kernel object for execution */
-    //cl_event kernel_event; /* task1 */
-    rv = clEnqueueTask(cmd_q, kernel, 0, NULL, NULL);
-    /*
-    // the same as above using clEnqueueNDRangeKernel() call
-    size_t global_work_size = 1;
+    size_t global_work_size = 2;
     rv = clEnqueueNDRangeKernel(cmd_q, kernel, 1, NULL,
             &global_work_size, NULL, 0, NULL, NULL);
-    */
     if(CL_SUCCESS != rv)
     {
         print_cl_error("Couldn\'t enqueue a task:", rv, stderr);
@@ -103,11 +113,8 @@
     if(CL_SUCCESS != (rv = clFinish(cmd_q)))
         print_cl_error("Failed to set a synchronization point:", rv, stderr);
 
-    // get kernel time using the OpenCL event profiling API
-    /* task1 */
-    
     /* 12. Read out the buffer back from the device to the host */
-    rv = clEnqueueReadBuffer(cmd_q, buf_out, CL_TRUE, 0, data_size, &data_out,
+    rv = clEnqueueReadBuffer(cmd_q, buf_out, CL_TRUE, 0, data_size, out_data,
             0, NULL, NULL);
     if(CL_SUCCESS != rv)
     {
@@ -116,13 +123,15 @@
         return rv;
     }
 
-    printf("Read value: %X\n", data_out);
+    printf("Read value: %X\n", out_data[0]);
+    printf("Read value: %X\n", out_data[1]);
 
     /* 13. Finalization */
     clReleaseKernel(kernel);
     clReleaseProgram(program);
     clReleaseCommandQueue(cmd_q);
     clReleaseContext(context);
+    clReleaseMemObject(buf_in);
     clReleaseMemObject(buf_out);
     // free host buffers bellow if necessary
 
